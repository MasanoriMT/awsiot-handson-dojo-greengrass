==================================================================
Greengrass向けLambda関数の登録とサブスクリプションの設定
==================================================================

Lambda関数の登録
=======================

Greengrassコアにデプロイする Lambda関数を登録します。

はじめに、Lambda関数パッケージを下記のリンクからPCにダウンロードして下さい。このzipファイルは、後ほどLambdaの設定画面でアップロードします。

https://s3-us-west-2.amazonaws.com/greengrass-trial/GGhandsonLambda.zip

このパッケージは、Lambda関数(greengrassCpuUsage.py)の他に、AWS Greengrass コア Python SDKが含まれています。
このSDKは、Lambda関数は実行中にGreengrassコアとの通信を可能にします。

サービス一覧から[Lambda] をクリックして開きます。

.. image:: images/04/lambda.png

|

下記のような画面が表示されるので、[今すぐ始める] をクリックします。

.. image:: images/04/lambda-2.png

|

Lambda関数の作成画面が表示されるので、"Blank Function" をクリックします。

.. image:: images/04/lambda-3.png

|

トリガーの設定画面が表示されるので、[次へ]をクリックします。

.. image:: images/04/lambda-4.png

|

ダウンロード済みのLambda関数パッケージ(GGhandsonLambda.zip)をアップロードします。
下記のような画面が表示されるので、必要事項を入力して下さい。

======================== =======================================
項目                        設定
======================== =======================================
名前                          greengrassCpuUsage-<参加者番号>
説明                          a Lambda func. to run Greengrass core
ランタイム                     Python 2.7
コード エントリ タイプ           .ZIPファイルをアップロード
関数パッケージ                  GGhandsonLambda.zip
ハンドラ                       greengrassCpuUsage.message_handler
ロール                         カスタムロールの作成
======================== =======================================

.. image:: images/04/lambda-5.png

|

ロール：[カスタムロールの作成] を選択すると、別画面でIAMの設定画面が出てきます。[許可] をクリックするとIAMの設定画面は閉じます。

.. image:: images/04/lambda-role.png

|

Lambdaの画面に戻ります。ロールが [既存のロールを選択] に変更され、ロール名として、"lambda_basic_execution" になって居居ることを確認し、[次へ] をクリックして下さい。

.. image:: images/04/lambda-6.png

|

確認画面が表示されますので、下までスクロースし、[関数の作成] をクリックして下さい。

.. image:: images/04/lambda-create.png

|

Lambda関数の作成に成功すると、下記の様な画面が表示されます。

.. image:: images/04/lambda-complete.png

|

コード内の "thingName" が、"Alert-01" となっていますので、01 の所をご自分の参加者番号に置き換えて下さい。CPUロードが 40% を越えると、アラートを"on"にするようになっています。

修正したら、 [保存] をクリックします。

.. image:: images/04/lambda-save.png

|

Lambda関数のバージョンを設定します。[アクション ▼] メニューから、[新しいバージョンを発行] をクリックします。

.. image:: images/04/lambda-version.png

|

[バージョンの説明] に、"Handson" と入力し、[発行] をクリックします。

.. image:: images/04/lambda-version-2.png

|

これで、Lambda関数の登録は、終了です。

次に、このLambda関数をGreengrassクループに追加します。

Greengrassの設定画面に戻り、Greengrassグループ：GGHandsonGroup-<参加者番号> をクリックして下さい。

.. image:: images/04/greengrass-group.png

|

メニューから [Lambda] をクリックします。

.. image:: images/04/add-lambda-to-group.png

|

[Lambdaの追加] をクリックします。

.. image:: images/04/add-lambda-to-group-2.png

|

[]既存のLambdaの使用] をクリックします。

.. image:: images/04/add-lambda-to-group-3.png

|

[greengrassCpuUsage-<参加者番号>] にチェックを入れ、[次へ] をクリックします。

.. image:: images/04/add-lambda-to-group-4.png

|

先ほど作成したLambda関数のバージョンにチェックを入れ、[次へ] をクリックします。

.. image:: images/04/add-lambda-to-group-5.png

|

Lambda関数のバージョンが、Greengrassグループに追加されました。

.. image:: images/04/add-lambda-to-group-6.png

|

シナリオ
==================

今回のハンズオンでは、下記のシナリオでGreengrassの動作を確認します。

- ① センサーデバイスが、Raspberry PiのCPUロードを定期的にトピック"sensing/data"にPublish
- ② トピック"sensing/data"をローカルLambdaにも流す
- ③ ローカルLambdaが、CPUロードを確認し、シャドウ "Alert"を"更新する
- ④ アラートデバイスは、シャドウ "Alert"がセットされると、アラートを出す
- ⑤ センサー用のシャドウ "LoadSwitch"は、クラウドとSyncする設定にしておき、クラウド側でシャドウを更新すると、センサーデバイスでRaspberry Piに負荷がかかる処理を実行する

.. image:: images/04/subscription-overview.png

|

サブスクリプションの設定
==========================

サブスクリプションは、ローカルデバイス、Greengrassコア、クラウド間のメッセージの送信先を定義するものです。今回のハンズオンでは、下記のサブスクリプションを設定します。

.. csv-table::
    :header-rows: 1
    :file: table/subscription.csv

|

**【注意】トピックフィルターの $aws/things/Alert-01/、$aws/things/Sensor-01/ の "01"は、ご自分の参加者番号に置き換えて下さい。**

このテーブルに従って、サブスクリプションの設定を行います。

Greengrassの設定画面に戻り、Greengrassグループ：GGHandsonGroup-<参加者番号> をクリックして下さい。

.. image:: images/04/greengrass-group.png

|

メニューから [サブスクリプション] をクリックします。

.. image:: images/04/subscription.png

|

まずは、①のソースのセンサーデバイスを設定します。ソースの [選択] をクリックします。

.. image:: images/04/source-1.png

|

[デバイス] をクリックし、Sensor-<参加者番号> をクリックします。

.. image:: images/04/source-1-select.png

|

次に、①のターゲットの IoT Cloud を設定します。ターゲットの [選択] をクリックします。

[デバイス] をクリックし、Sensor-<参加者番号> をクリックします。

.. image:: images/04/target-1.png

|

[サービス] をクリックし、IoT Cloud をクリックします。

.. image:: images/04/target-1-select.png

|

[次へ] をクリックします。

.. image:: images/04/next.png

|

オプションのトピックのフィルターに sensing/data を入力し、[次へ] をクリックします。

.. image:: images/04/topic-filter-1.png

|

確認画面が出てきますので、[完了] をクリックして、設定を保存します。

.. image:: images/04/subscription-confirm.png

|

上記の操作を繰り返して、残りのサブスクリプションの設定を行って下さい。

②の設定

.. image:: images/04/subscription-2.png

|

③の設定

.. image:: images/04/subscription-3.png

|

④-1の設定

.. image:: images/04/subscription-4-1.png

|

④-2の設定

.. image:: images/04/subscription-4-2.png

|

④-3の設定

.. image:: images/04/subscription-4-3.png

|

④-4の設定

.. image:: images/04/subscription-4-4.png

|

⑤-1の設定

.. image:: images/04/subscription-5-1.png

|

⑤-2の設定

.. image:: images/04/subscription-5-2.png

|

⑤-3の設定

.. image:: images/04/subscription-5-3.png

|

⑤-4の設定

.. image:: images/04/subscription-5-4.png

|

最終的には、下記の様になります。

.. image:: images/04/subscription-result.gif

|

トピックが長い場合、入力したフィルター全体が表示されませんが、トピックが隠れている所にマウスポインタを置くと、トピックの隠れていた部分も含めて全体が表示されます。

これで、クラウド側の設定は、終わりです。
