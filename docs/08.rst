==================================================================
Greengrass向けLambda関数の更新とサブスクリプションの設定
==================================================================

クラウド上で動作させていたlambda関数をGreengrassコアにデプロイ、動作できるよう更新します。

.. image:: images/08/overview-gg.png

|

AWS IoT Lambdaルールの無効化
=======================

クラウド上で動作させていたlambda関数を、無効化します。
AWS IoTのメニューから[ルール]をクリックします。
一覧が表示されますので、cpuUsageRule-<参加者番号>を選択して下さい。

.. image:: images/08/iot-rule-list.png

|

[アクション]をクリックし、プルダウンメニューから[無効化]をクリックして下さい。

.. image:: images/08/iot-rule-disable.png

|

ルールが無効化されました。

.. image:: images/08/iot-rule-disabled.png

|

Lambda関数の更新
=======================

Lambda関数をGreengrassコアにデプロイ、動作できるよう更新します。

サービス一覧から[Lambda] をクリックして開きます。

.. image:: images/08/lambda.png

|

Lambda関数一覧が表示されます。
先ほど作成したcpuUsageChecker-<参加者番号>を選択します。

.. image:: images/08/lambda-list.png

|

コードをインラインで編集します。
boto3の代わりにgreengrasssdkを利用するよう、修正して下さい。
このSDKは、Greengrassコアとの通信を可能にします。


|

.. image:: images/08/lambda-edit.png

|

**コード(変更前)**

::

  import sys
  import logging
  import json
  import boto3
  # import greengrasssdk

  # Setup logging to stdout
  logger = logging.getLogger(__name__)
  logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)

  client = boto3.client('iot-data')
  # client = greengrasssdk.client('iot-data')

|

**コード(変更後)**

::

  import sys
  import logging
  import json
  # import boto3
  import greengrasssdk

  # Setup logging to stdout
  logger = logging.getLogger(__name__)
  logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)

  # client = boto3.client('iot-data')
  client = greengrasssdk.client('iot-data')

|

コードを変更したら[保存]をクリックして下さい。

.. image:: images/08/lambda-edit2.png

|

Lambda関数のバージョンを設定します。[アクション ▼] メニューから、[新しいバージョンを発行] をクリックします。

.. image:: images/08/lambda-version.png

|

[バージョンの説明] に、"Handson" と入力し、[発行] をクリックします。

.. image:: images/08/lambda-version-2.png

|

これで、Lambda関数の登録は、終了です。

次に、このLambda関数をGreengrassクループに追加します。

Greengrassの設定画面に戻り、[Greengrass] > [グループ]をクリックし、
一覧からGGHandsonGroup-<参加者番号> を選択して下さい。

.. image:: images/08/greengrass-group.png

|

メニューから [Lambda] をクリックします。

.. image:: images/08/add-lambda-to-group.png

|

[Lambdaの追加] をクリックします。

.. image:: images/08/add-lambda-to-group-2.png

|

[既存のLambdaの使用] をクリックします。

.. image:: images/08/add-lambda-to-group-3.png

|

[cpuUsageChecker-<参加者番号>] にチェックを入れ、[次へ] をクリックします。

.. image:: images/08/add-lambda-to-group-4.png

|

先ほど作成したLambda関数のバージョンにチェックを入れ、[次へ] をクリックします。

.. image:: images/08/add-lambda-to-group-5.png

|

Lambda関数のバージョンが、Greengrassグループに追加されました。

.. image:: images/08/add-lambda-to-group-6.png

|

シナリオ
==================

今回のハンズオンでは、下記のシナリオでGreengrassの動作を確認します。
動作確認を容易化するため、センシングしたデータはエッジだけでなくクラウドにも送信します。

- ① センサーデバイスが、Raspberry PiのCPUロードを定期的にトピック"sensing/data"にPublish
- ② トピック"sensing/data"をローカルLambdaにも流す
- ③ ローカルLambdaが、CPUロードを確認し、シャドウ "Alert"を更新する
- ④ アラートデバイスは、シャドウ "Alert"がセットされると、アラートを出す
- ⑤ センサー用のシャドウ "LoadSwitch"は、クラウドとSyncする設定にしておき、クラウド側でシャドウを更新すると、センサーデバイスでRaspberry Piに負荷がかかる処理を実行する

.. image:: images/08/subscription-overview.png

|

サブスクリプションの設定
==========================

サブスクリプションは、ローカルデバイス、Greengrassコア、クラウド間のメッセージの送信先を定義するものです。今回のハンズオンでは、下記のサブスクリプションを設定します。

.. csv-table::
    :header-rows: 1
    :file: table/subscription.csv

|

このテーブルに従って、サブスクリプションの設定を行います。

Greengrassの設定画面に戻り、Greengrassグループ：GGHandsonGroup-<参加者番号> をクリックして下さい。

.. image:: images/08/greengrass-group.png

|

メニューから [サブスクリプション] をクリックします。

.. image:: images/08/subscription.png

|

まずは、①のソースのセンサーデバイスを設定します。ソースの [選択] をクリックします。

.. image:: images/08/source-1.png

|

[デバイス] をクリックし、Sensor-<参加者番号> をクリックします。

.. image:: images/08/source-1-select.png

|

次に、①のターゲットの IoT Cloud を設定します。ターゲットの [選択] をクリックします。

.. image:: images/08/target-1.png

|

[サービス] をクリックし、IoT Cloud をクリックします。

.. image:: images/08/target-1-select.png

|

[次へ] をクリックします。

.. image:: images/08/next.png

|

オプションのトピックのフィルターに sensing/data/Sensor-<参加者番号> を入力し、[次へ] をクリックします。

.. image:: images/08/topic-filter-1.png

|

確認画面が出てきますので、[完了] をクリックして、設定を保存します。

.. image:: images/08/subscription-confirm.png

|

上記の操作を繰り返して、残りのサブスクリプションの設定を行って下さい。

②の設定

.. image:: images/08/subscription-2.png

|

③の設定

.. image:: images/08/subscription-3.png

|

④-1の設定

.. image:: images/08/subscription-4-1.png

|

④-2の設定

.. image:: images/08/subscription-4-2.png

|

⑤-1の設定

.. image:: images/08/subscription-5-1.png

|

⑤-2の設定

.. image:: images/08/subscription-5-2.png

|

最終的には、下記の様になります。

.. image:: images/08/subscription-result.png

|

トピックが長い場合、入力したフィルター全体が表示されませんが、トピックが隠れている所にマウスポインタを置くと、トピックの隠れていた部分も含めて全体が表示されます。

これで、クラウド側の設定は、終わりです。
