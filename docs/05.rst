=======================================
アプリケーションの動作確認
=======================================

アプリケーションを実際に動かして、動作を確認します。
本ハンズオンでは、センサーデバイスはRaspberry Pi上のCPU使用率を定期的にAWS IoTのsensing/dataにuploadし、これをトリガーに実行されたlambda関数がCPU使用率を確認、閾値を超える、もしくは下回るとアラートデバイスのalertのon/offを切り替えます。

本ハンズオンでは、センサーデバイスのCPU使用率を制御するため、センサーデバイスは、高負荷の処理を実行するswitchをシャドウとして保持します。このswitchをonにすることで、センサーデバイスを閾値を超える高負荷状態にすることができます。

.. image:: images/05/overview-iot.png

|

デバイスの起動
=================

アラートデバイスを起動する
-----------------------------

コンソールを開き、下記を入力して、アラートデバイスを起動します。

::

  cd GGHandson/alert_device
  python ./ThingShadowAlarm.py -e xxxxxxxxxxxx.iot.us-west-2.amazonaws.com -r root-ca.pem -c yyyyyyyyyy-certificate.pem.crt -k yyyyyyyyyy-private.pem.key -n Alert-<参加者番号> -id Alert-<参加者番号>

|

各実行パラメータの説明は以下になります。

.. csv-table::
    :header-rows: 1
    :file: table/alert_device_option.csv

|

===================== ============================== ==============================
オプション                        説明                      値
===================== ============================== ==============================
-e, --endpoint        AWS IoTのEndpoint               xxxxxxxxxxxx.iot.us-west-2.amazonaws.com
-r, --rootCA          AWS IoTのサーバ証明書                 root-ca.pem
-c, --cert            アラートデバイスの証明書                   yyyyyyyyyy-certificate.pem.crt
-k, --key             アラートデバイスの秘密鍵                   yyyyyyyyyy-private.pem.key
-n, --thingName       アラートデバイス名                      Alert-<参加者番号>
-id, --clientId       アラートデバイスのクライアントID              Alert-<参加者番号>
===================== ============================== ==============================

アラートデバイスは、デバイスシャドウ のキー Alert の更新を待ち続けます。

エラーが出る場合、オプションに指定したパラメータが正しいか、モノに証明書がアタッチされているか、証明書にポリシーがアタッチされているか、ポリシーの内容は適切か、再度確認して下さい。

センサーデバイスを起動する
-----------------------------

新規にコンソールを開き、下記を入力して、アラートデバイスを起動します。

::

  cd GGHandson/sensor_device
  python ./ThingShadowSensor.py -e xxxxxxxxxxxx.iot.us-west-2.amazonaws.com -r root-ca.pem -c zzzzzzzzzz-certificate.pem.crt -k zzzzzzzzzz-private.pem.key -n Sensor-<参加者番号> -id Sensor-<参加者番号>

|

各実行パラメータの説明は以下になります。

===================== ============================== ==============================
オプション                        説明                      値
===================== ============================== ==============================
-e, --endpoint        AWS IoTのEndpoint               xxxxxxxxxxxx.iot.us-west-2.amazonaws.com
-r, --rootCA          AWS IoTのサーバ証明書                 root-ca.pem
-c, --cert            センサーデバイスの証明書                   zzzzzzzzzz-certificate.pem.crt
-k, --key             センサーデバイスの秘密鍵                   zzzzzzzzzz-private.pem.key
-n, --thingName       センサーデバイス名                      Sensor-<参加者番号>
-id, --clientId       センサーデバイスのクライアントID              Sensor-<参加者番号>
===================== ============================== ==============================

センサーデバイスは、Raspberry PiのCPUロードをトピック sensing/data にPublishし続けます。

エラーが出る場合、オプションに指定したパラメータが正しいか、モノに証明書がアタッチされているか、証明書にポリシーがアタッチされているか、ポリシーの内容は適切か、再度確認して下さい。

この時点で、アラートデバイスとセンサーデバイス の2つのソフトウェアが同時に起動していることになります。


動作確認
===========================

AWS コンソールのAWS IoT に移動します。

メニューから [登録] をクリックし、センサーデバイスをクリックします。

.. image:: images/05/awsiot-sensor-device.png

|

メニューから、[シャドウ] をクリックし、センサーデバイスのシャドウを表示します。

.. image:: images/05/sensor-shadow.png

|

"LoadSwitch": "off" の状態では、CPUロードは、数% 程度です。CPUロードを上げてみましょう。

右上の [編集] をクリックして、下記の様に書き換えて下さい。

::

  {
    "desired": {
      "LoadSwitch": "on"
    }
  }

|

その後、右上の [保存] をクリックして下さい。クラウド上の "LoadSwitch" センサーデバイスのシャドウと同期し、"reported"の"LoadSwitch"が"on" になります。

.. image:: images/05/shadow-sync.gif

|

Raspberry Piのリモート画面を見て下さい。

センサーデバイスが、"LoadSwitch" の状態が "on" になったことを認識し、内部でCPU負荷のかかる計算を実行します。その結果、Raspberry PiのCPU usageが 70% 程度に上がります。AWS IoTのsensing/data トピックにデータがinputされると、Lambdaが実行されており、Lambda関数内の処理でCPU負荷が閾値を上回るとアラートデバイスのシャドウ "Alert"を "on"に更新します。アラートデバイスが、"Alert": "on" を確認すると、アラートデバイス アプリが、“!!!!!alert!!!!!" と表示します。

AWS IoTのコンソールで、"desired"内の”LoadSwitch"を "off"にすると、"!!!!!alert!!!!!" は停止します。

.. image:: images/05/shadow-load-switch-off.gif

|
